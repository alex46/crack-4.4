/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ArrayList<ArrayList<Integer>> levelOrder(TreeNode root) {
        // Start typing your Java solution below
        // DO NOT write main() function
        
        ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
        
        if(root ==null) return result;
        
        ArrayList<Integer> a = new ArrayList<Integer>();
   
        return helper(root,result);
        
    }
    
    public ArrayList<ArrayList<Integer>> helper(TreeNode root, ArrayList<ArrayList<Integer>> result){
    
    
       ArrayList<TreeNode> toVisit = new ArrayList<TreeNode>();
      
       toVisit.add(root);
       
       while(!toVisit.isEmpty()){
       

       ArrayList<TreeNode> temp = new ArrayList<TreeNode>();

       
       for(int i = 0; i < toVisit.size();i++){
         
           
           TreeNode cur = toVisit.get(i);
           
           if(cur.left!=null) {
      
               temp.add(cur.left);
           
           }
           if(cur.right!=null) {

           temp.add(cur.right);
           }
           
       }
       
       result.add(toVisit);
       toVisit = temp;
    }
    return result;
    
    }
}
